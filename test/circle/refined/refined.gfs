# Title: Star-shaped solid boundary with refinement
#
# Description:
#
# Same as the star test but with two levels of refinement added near 
# the solid boundary.
#
# \begin{figure}[htbp]
# \caption{\label{solution}Solution of the Poisson equation.}
# \begin{center}
# \includegraphics[width=0.6\hsize]{solution.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{residual}Evolution of the residual.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{residual.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{rate}Average reduction factor.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{rate.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{error}Evolution of the error as a function of resolution.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{error.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{order}Corresponding convergence order.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{order.eps}
# \end{center}
# \end{figure}
#
# Author: St\'ephane Popinet
# Command: sh ../circle.sh refined.gfs
# Version: 100325
# Required files: res-7.ref error.ref order.ref solution.gfv
# Generated files: residual.eps rate.eps error.eps order.eps solution.eps
#
1 0 GfsPoisson GfsBox GfsGEdge {} {
    Time { iend = 1 }
    Refine LEVEL
    RefineSolid (LEVEL + 2)
    Solid ({
            double dr = 0.1;
            double theta = atan2 (y, x);
            double radius = 0.79*(0.45 - dr + dr*cos (6.*theta));
            return x*x + y*y - radius*radius;
          })
    GModule hypre
    ApproxProjectionParams { tolerance = 1e-30 nitermin = CYCLE nitermax = CYCLE }
    Init {} {
        Div = {
            int k = 3, l = 3;
            return -M_PI*M_PI*(k*k + l*l)*sin (M_PI*k*x)*sin (M_PI*l*y);
        }
    }
    OutputTime { istep = 1 } {
      awk '{if ($2 == 1) {print "CYCLE " $8}}' >> time
    }
    OutputProjectionStats { start = end } {
        awk '{
      if ($1 == "residual.infty:") print "CYCLE "$3 " " $4;
    }' >> proj
    }
    OutputSimulation { start = end } sim-LEVEL-SOLVER { variables = P }
}
GfsBox {}
