# Title: Numerical viscosity for vorticity/streamfunction formulation
#
# Description:
#
# Same as the previous test but using a vorticity/streamfunction formulation.
#
# \begin{figure}[htbp]
# \caption{\label{divmax}Evolution of the maximum divergence.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{divmax.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{divL2}Evolution of the L2 norm of the divergence.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{divL2.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{kinetic}Evolution of the kinetic energy.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{kinetic.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{reynolds}Equivalent Reynolds number as a function of resolution.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{reynolds.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{accuracy}Accuracy of the solution as a function of the level of refinement.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{accuracy.eps}
# \end{center}
# \end{figure}
#
# Author: St\'ephane Popinet
# Command: sh ../reynolds.sh stream.gfs 1
# Version: 110610
# Required files: div5.ref div6.ref div7.ref reynolds.ref
# Running time: 3 minutes
# Generated files: divmax.eps reynolds.eps divL2.eps kinetic.eps accuracy.eps
#
1 2 GfsAdvection GfsBox GfsGEdge {} {
  Time { end = 2 }
  Refine LEVEL
  VariableTracer Omega
  Init {} {
    U0 = (- cos (2.*M_PI*x)*sin (2.*M_PI*y))
    V0 = (sin (2.*M_PI*x)*cos (2.*M_PI*y))
    # we need (U,V) to compute the vorticity
    U = U0
    V = V0
  }
  # In the general case the vorticity cannot be consistently
  # defined directly (because it needs to verify discrete properties
  # on the circulation)
  # Initialising from the velocity field (U,V) as done below should be safe
  Init {} { Omega = Vorticity }
  VariablePoisson Psi -Omega
  VariableStreamFunction { istep = 1 } Psi1 Psi
  OutputScalarNorm { istep = 1 } divLEVEL { v = (dx("U") + dy("V")) }
  OutputScalarSum { istep = 1 } kineticLEVEL { v = Velocity2 }
  OutputScalarSum { istep = 1 } stdout { v = Velocity2 }
  OutputErrorNorm { start = end } { awk '{ print $3,$5,$7,$9 }' > errorLEVEL.dat } {
      v = Velocity
  } { 
      s = sqrt(U0*U0+V0*V0)
      v = E
      relative = 1
  }
}
GfsBox {}
1 1 right
1 1 top
