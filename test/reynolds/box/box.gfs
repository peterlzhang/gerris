# Title: Estimation of the numerical viscosity with refined box
#
# Description:
#
# Same as the previous test but with a refined box in the middle and four
# modes of the exact Euler solution.
#
# \begin{figure}[htbp]
# \caption{\label{divmax}Evolution of the maximum divergence.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{divmax.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{divL2}Evolution of the L2 norm of the divergence.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{divL2.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{kinetic}Evolution of the kinetic energy.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{kinetic.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{reynolds}Equivalent Reynolds number as a function of resolution.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{reynolds.eps}
# \end{center}
# \end{figure}
#
# \begin{figure}[htbp]
# \caption{\label{accuracy}Accuracy of the solution as a function of the level of refinement.}
# \begin{center}
# \includegraphics[width=0.8\hsize]{accuracy.eps}
# \end{center}
# \end{figure}
#
# Author: St\'ephane Popinet
# Command: sh ../reynolds.sh box.gfs 4
# Version: 0.6.4
# Required files: ../reynolds.sh div5.ref div6.ref div7.ref reynolds.ref
# Running time: 3 minutes
# Generated files: divmax.eps reynolds.eps divL2.eps kinetic.eps accuracy.eps
#
1 2 GfsSimulation GfsBox GfsGEdge {} {
  Time { end = 2 }
  Refine (x > 0.25 || x < -0.25 || y > 0.25 || y < -0.25 ? LEVEL : LEVEL + 1)
  Init {} {
    U0 = (- cos (8.*M_PI*x)*sin (8.*M_PI*y))
    V0 = (sin (8.*M_PI*x)*cos (8.*M_PI*y))
    U = U0
    V = V0
  }
  ApproxProjectionParams { tolerance = 1e-6 }
  ProjectionParams { tolerance = 1e-6 }
  OutputScalarNorm { istep = 1 } divLEVEL { v = Divergence }
  OutputScalarSum { istep = 1 } kineticLEVEL { v = Velocity2 }
  OutputScalarSum { istep = 1 } stdout { v = Velocity2 }
  OutputErrorNorm { start = end } { awk '{ print $3,$5,$7,$9 }' > errorLEVEL.dat } {
      v = Velocity
  } { 
      s = sqrt(U0*U0+V0*V0)
      v = E
      relative = 1
  }
}
GfsBox {}
1 1 right
1 1 top
